@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@implements IDisposable

@using System.Security.Claims
@using Harmony.Application.DTO;
@using Harmony.Application.Events
@using Harmony.Application.Features.Workspaces.Queries.GetAllForUser;
@using Harmony.Shared.Constants.Permission;
@using Harmony.Shared.Utilities;

<UserCard ImageDataUrl="@ImageDataUrl" />
<MudDivider DividerType="DividerType.Inset" Class="ml-0 mb-2" />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
    @*     <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
    Swagger
    </MudNavLink> *@

    @if (_workspaceManager.SelectedWorkspace != null)
    {
        @if (_workspaceManager.UserWorkspaces.Any())
        {
            foreach (var workspace in _workspaceManager.UserWorkspaces)
            {
                <MudList T="string" Clickable="true">
                    <MudListItem Text="@workspace?.Name"
                                 InitiallyExpanded="true">
                        <NestedList>
                            <MudListItem Href="@($"{WorkspaceUrl(workspace)}/members")" Icon="@Icons.Material.Outlined.Groups2">
                                Members
                            </MudListItem>
                            @if (workspace.Boards.Any())
                            {
                                <MudDivider />
                                <MudList Clickable="true">
                                    @foreach (var board in workspace.Boards)
                                    {
                                        <MudListItem Text="@board.Title"
                                                     Icon="@(board.Type == Domain.Enums.BoardType.Kanban ? Icons.Material.Filled.ListAlt : Icons.Material.Filled.Update)"
                                                     InitiallyExpanded="false">
                                            <NestedList>
                                                <MudListItem Href="@GetBoardUrl(board)" Icon="@Icons.Material.Filled.Dashboard">
                                                    Board
                                                </MudListItem>
                                                <MudListItem Href="@GetBoardWorkItemsUrl(board)" Icon="@Icons.Material.Filled.Task">
                                                    Work items
                                                </MudListItem>
                                                @if (board.Type == Domain.Enums.BoardType.Scrum)
                                                {
                                                    <MudListItem Href="@GetBacklogUrl(board)" Icon="@Icons.Material.Filled.ListAlt">
                                                        Backlog
                                                    </MudListItem>
                                                    <MudListItem Href="@GetSprints(board)" Icon="@Icons.Material.Filled.Update">
                                                        Sprints
                                                    </MudListItem>
                                                }
                                                <MudListItem Text="Settings" Icon="@Icons.Material.Filled.Settings">
                                                    <NestedList>
                                                        <MudListItem Href="@GetBoardAutomationUrl(board)" Icon="@Icons.Material.Filled.AutoMode">
                                                            Automation
                                                        </MudListItem>
                                                    </NestedList>
                                                </MudListItem>
                                            </NestedList>
                                        </MudListItem>
                                        <MudDivider />
                                    }
                                </MudList>
                            }
                        </NestedList>
                    </MudListItem>
                </MudList>
            }
        }
    }

</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewRoles;
    private bool _canViewUsers;
    private WorkspaceDto _selectedWorkspace;

    [Parameter]
    public string ImageDataUrl { get; set; }

    protected override void OnInitialized()
    {
        _workspaceManager.OnSelectedWorkspace += SelectedWorkspaceChanged;
        _boardManager.OnBoardCreated += OnBoardCreated;
    }

    private void OnBoardCreated(object sender, BoardCreatedEvent e)
    {
        var userWorkspace = _workspaceManager.UserWorkspaces.FirstOrDefault(uw => uw.Id.ToString() == e.WorkspaceId);

        if (userWorkspace != null)
        {
            userWorkspace.Boards.Add(e.Board);
        }

        StateHasChanged();
    }

    protected void SelectedWorkspaceChanged(object sender, WorkspaceDto selectedWorkspace)
    {
        if (_selectedWorkspace == null || (_selectedWorkspace.Id != selectedWorkspace.Id))
        {
            _selectedWorkspace = selectedWorkspace;
        }

        StateHasChanged();
    }

    private string GetBoardUrl(BoardDto board)
    {
        var slug = StringUtilities.SlugifyString(board.Title.ToString());

        return $"boards/{board.Id}/{slug}";
    }

    private string GetBoardWorkItemsUrl(BoardDto board)
    {
        return $"boards/{board.Id}/work-items";
    }

    private string GetBoardDetailsUrl(BoardDto board)
    {
        return $"projects/{board.Id}/settings/details";
    }

    private string GetBoardAutomationUrl(BoardDto board)
    {
        return $"projects/{board.Id}/settings/automation";
    }

    private string GetBacklogUrl(BoardDto board)
    {
        return $"/projects/{board.Id}/backlog";
    }

    private string GetSprints(BoardDto board)
    {
        return $"/projects/{board.Id}/sprints";
    }

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
    }

    private string WorkspaceUrl()
    {
        var workspace = _selectedWorkspace ?? _workspaceManager.SelectedWorkspace;
        var slug = StringUtilities.SlugifyString(workspace.Name);
        return $"/workspaces/{workspace.Id}/{slug}";
    }

    private string WorkspaceUrl(WorkspaceDto workspace)
    {
        var slug = StringUtilities.SlugifyString(workspace.Name);
        return $"/workspaces/{workspace.Id}/{slug}";
    }

    void IDisposable.Dispose()
    {
        _boardManager.OnBoardCreated -= OnBoardCreated;
    }
}